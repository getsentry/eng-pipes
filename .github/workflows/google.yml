# This workflow will deploy to Google Cloud Run
#
# To configure this workflow, set up the following secrets in your workspace
#
#  * `GITHUB_APP_IDENTIFIER` - GitHub App identifier
#  * `GITHUB_APP_PRIVATE_KEY` - GitHub App private key
#  * `GOOGLE_SERVICE_ACCOUNT_EMAIL` - Google service account email
#  * `GOOGLE_APPLICATION_CREDENTIALS` - Google service account private key
#  * `GITHUB_WEBHOOK_SECRET` - GitHub webhook secret to confirm that webhooks come from GitHub

name: Deploy

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    name: google
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment: production
    env:
      SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:12
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: docker
        ports:
          - 5434:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup node
      uses: actions/setup-node@v1
      with:
        node-version: '12'

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - uses: actions/cache@v2
      id: yarn-cache
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: yarn install
      run: |
        echo "$(yarn global bin)" >> $GITHUB_PATH
        yarn install --frozen-lockfile
        yarn global add @sentry/cli

    - name: test
      run: yarn test:ci

    - name: Get version
      id: get-version
      run: echo "::set-output name=version::$(sentry-cli releases propose-version)"

    # Build ts
    - name: Build
      run: |
        yarn build

    # Setup gcloud CLI
    - name: Setup gcloud CLI
      uses: google-github-actions/setup-gcloud@master
      with:
        service_account_email: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_EMAIL }}
        service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

    # Deploy to Google Cloud Functions
    - name: Deploy
      id: deploy
      env:
        VERSION: ${{ steps.get-version.outputs.version }}
        SLACK_BOT_USER_ACCESS_TOKEN: ${{ secrets.SLACK_BOT_USER_ACCESS_TOKEN }}
        SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET }}
        SLACK_BOT_APP_ID: ${{ secrets.SLACK_BOT_APP_ID }}
        GH_APP_SECRET_KEY: ${{ secrets.GH_APP_SECRET_KEY }}
        GH_APP_IDENTIFIER: ${{ secrets.GH_APP_IDENTIFIER }}
        GH_WEBHOOK_SECRET: ${{ secrets.GH_WEBHOOK_SECRET }}
        SENTRY_WEBPACK_WEBHOOK_SECRET: ${{ secrets.SENTRY_WEBPACK_WEBHOOK_SECRET }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_INSTANCE_CONNECTION_NAME: ${{ secrets.DB_INSTANCE_CONNECTION_NAME }}
      run: |
        echo "::set-output name=deploy-start::$(date +%s)"
        bin/deploy.sh

    - name: Sentry Release
      uses: getsentry/action-release@v1.0.0
      with:
        environment: 'production'
        sourcemaps: './lib'
        started_at: ${{ steps.deploy.outputs.deploy-start }}
        version: ${{ steps.get-version.outputs.version }}
